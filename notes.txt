step 1: create a github account

step 2: create a repo in github

step 3: open terminal in vs code

step 4: init git in a local repo. Command : "git init"

step 5: configure user and email to local repo
	
	Commands: git config --global user.name ""
		  git config --global user.mail ""

step 6: add remote/cloud repo to local repo
	
	Command: git remote add origin <http path>

step 7: git pull origin <branch name> 

step 8: convert untracked files to tracked files
	Commands: git add .
		  git commit -m "<some message>"

step 9: check status. Command: git status

step 10: push to cloud repo
	Command: git push -u origin <branch name>

REACT:-
~~~~~~~
Structure:-
    1. Node modules - this folder storea al lthe third party libraries.
    2. public - public folder is a static folder that contains images, videos, html file.
    3. src - src is called as the main react folder. Whatever we need to modify or add, we have to do changes in the src only.
    4. package.json - it is called the heart of any react application.
                    - it will store all the information of application and its dependency.
    5. package-lock.json - 


JSX:-
------
- JSX
- JSX stands for Javascript and "Javascript XML".
- is a javascript syntax extension to create html-like markup in the reactjs.
- is not belongs to Reactjs but it is recomendded to use in react.
- is a case-sensitive.
- actual way of creating the react elements is: React. createE1ement( "tagname" , {property: value}, children/ content);

1. Class based components :-
-----------------------------
- class component is similar to javascript ES6 classs.

    syntax:- class App extends React.component{
        render(){
            return(
                //jsx
            )
        }
    }

2. functional components:-
--------------------------
- this is similar to a javascript function.


component composition:-
-----------------------

- component composition is a combination of multiple files/components to make a single application 

Note:- any component created in react 


props:-
k
-------

props.children: it is a special type of prop used to pass data from parent to child component


props drilling:-
----------------
props drilling is way to pass the data down to the child component

Tight Coupling:
--------------
One is dependent upon another. between components
child Component -> Parent Component


useEffect():-
-------------

- this hook allows devs to apply side affect in the components suchas api fetching, updating 

syntax:-
    useEffect(callbackfn, dependency);

List & keys: when we are listing the items in react, we ned to provide unique values
             for each item by using props


useRef():-
---------
    - it is used to target the native/real DOM elements.

useContext() API:-
------------------


Routing in react:-
------------------
    - routing in nothing but navigating to other pages without reloading.
        "npm install react-router-dom@latest"